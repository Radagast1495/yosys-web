@cmd_header write_json@
<h1>write_json - write design to a JSON file</h1>
<pre>
    write_json [options] [filename]

Write a JSON netlist of the current design.

The general syntax of the JSON output created by this command is as follows:

    {
      "modules": {
        &lt;module_name&gt;: {
          "ports": {
            &lt;port_name&gt;: &lt;port_details&gt;,
            ...
          },
          "cells": {
            &lt;cell_name&gt;: &lt;cell_details&gt;,
            ...
          },
          "netnames": {
            &lt;net_name&gt;: &lt;net_details&gt;,
            ...
          }
        }
      }
    }

Where &lt;port_details&gt; is:

    {
      "direction": &lt;"input" | "output" | "inout"&gt;,
      "bits": &lt;bit_vector&gt;
    }

And &lt;cell_details&gt; is:

    {
      "hide_name": &lt;1 | 0&gt;,
      "type": &lt;cell_type&gt;,
      "parameters": {
        &lt;parameter_name&gt;: &lt;parameter_value&gt;,
        ...
      },
      "attributes": {
        &lt;attribute_name&gt;: &lt;attribute_value&gt;,
        ...
      },
      "connections": {
        &lt;port_name&gt;: &lt;bit_vector&gt;,
        ...
      },
    }

And &lt;net_details&gt; is:

    {
      "hide_name": &lt;1 | 0&gt;,
      "bits": &lt;bit_vector&gt;
    }

The "hide_name" fields are set to 1 when the name of this cell or net is
automatically created and is likely not of interest for a regular user.

Module and cell ports and nets can be single bit wide or vectors of multiple
bits. Each individual signal bit is assigned a unique integer. The &lt;bit_vector&gt;
values referenced above are vectors of this integers. Signal bits that are
connected to a constant driver are denoted as string "0" or "1" instead of
a number.

For example the following verilog code:

    module test(input x, y);
      (* keep *) foo #(.P(42), .Q(1337))
          foo_inst (.A({x, y}), .B({y, x}), .C({4'd10, {4{x}}}));
    endmodule

Translates to the following JSON output:

    {
      "modules": {
        "test": {
          "ports": {
            "x": {
              "direction": "input",
              "bits": [ 2 ]
            },
            "y": {
              "direction": "input",
              "bits": [ 3 ]
            }
          },
          "cells": {
            "foo_inst": {
              "hide_name": 0,
              "type": "foo",
              "parameters": {
                "Q": 1337,
                "P": 42
              },
              "attributes": {
                "keep": 1,
                "src": "test.v:2"
              },
              "connections": {
                "C": [ 2, 2, 2, 2, "0", "1", "0", "1" ],
                "B": [ 2, 3 ],
                "A": [ 3, 2 ]
              }
            }
          },
          "netnames": {
            "y": {
              "hide_name": 0,
              "bits": [ 3 ],
              "attributes": {
                "src": "test.v:1"
              }
            },
            "x": {
              "hide_name": 0,
              "bits": [ 2 ],
              "attributes": {
                "src": "test.v:1"
              }
            }
          }
        }
      }
    }

Future version of Yosys might add support for additional fields in the JSON
format. A program processing this format must ignore all unkown fields.

</pre>
@footer@
