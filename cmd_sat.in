@cmd_header sat@
<h1>sat - solve a SAT problem in the circuit</h1>
<pre>
    sat [options] [selection]

This command solves a SAT problem defined over the currently selected circuit
and additional constraints passed as parameters.

    -all
        show all solutions to the problem (this can grow exponentially, use
        -max &lt;N&gt; instead to get &lt;N&gt; solutions)

    -max &lt;N&gt;
        like -all, but limit number of solutions to &lt;N&gt;

    -set &lt;signal&gt; &lt;value&gt;
        set the specified signal to the specified value.

    -show &lt;signal&gt;
        show the model for the specified signal. if no -show option is
        passed then a set of signals to be shown is automatically selected.

The following options can be used to set up a sequential problem:

    -seq &lt;N&gt;
        set up a sequential problem with &lt;N&gt; time steps. The steps will
        be numbered from 1 to N.

    -set-at &lt;N&gt; &lt;signal&gt; &lt;value&gt;
    -unset-at &lt;N&gt; &lt;signal&gt;
        set or unset the specified signal to the specified value in the
        given timestep. this has priority over a -set for the same signal.

The following additional options can be used to set up a proof. If also -seq
is passed, a temporal induction proof is performed.

    -prove &lt;signal&gt; &lt;value&gt;
        Attempt to proof that &lt;signal&gt; is always &lt;value&gt;. In a temporal
        induction proof it is proven that the condition holds forever after
        the number of time steps passed using -seq.

    -maxsteps &lt;N&gt;
        Set a maximum length for the induction.

    -timeout &lt;N&gt;
        Maximum number of seconds a single SAT instance may take.

    -verify
        Return an error and stop the synthesis script if the proof fails.

    -verify-no-timeout
        Like -verify but do not return an error for timeouts.

</pre>
@footer@
