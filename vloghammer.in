@header VlogHammer@

<h1>VlogHammer</h1>

<p>VlogHammer is a Verilog regression tester used to verify the correctness of
Yosys's Verilog frontend. At the moment VlogHammer only tests combinatorial
circuits described using Verilog expressions.</p>

<p>VlogHammer compares the implementation generated by Yosys with the
implementations generated by the following proprietary free-to-use tools:</p>

<ul>
<li>Xilinx Vivado WebPack</li>
<li>Xilinx ISE (XST) WebPack</li>
<li>Altera Quartus Web Edition</li>
</ul>

<p>In addition the behavior of the generated circuits is compared of the behavior
described in the original Verilog code, as interprated by the following
Verilog Simulators:</p>

<ul>
<li>Xilinx Isim (bundled with Xilinx ISE)</li>
<li>Mentor Modelsim (bundled with Altera Quartus II)</li>
<li>Icarus Verilog (free software)</li>
</ul>

<p>We have found bugs in Yosys and all of the above tools (with the exception of
Modelsim) using VlogHammer. The bugs in Yosys have been fixed and we share
our results in the hope that it will help the vendors of the other tools to
fix the bugs in their solutions.</p>

<p>The VlogHammer source code can be found on GitHub: <a
href="https://github.com/cliffordwolf/VlogHammer">https://github.com/cliffordwolf/VlogHammer</a></p>

<h2>Scope of Tests</h2>

<p>VlogHammer is using many auto-generated test cases and a few hand-written test
cases. The tests do not use behavioral modeling at the moment and concentrate
on correct interpretation of Verilog expressions. Our experience with VlogHammer
shows that while synthesis of Verilog expressions is not particular hard to do,
it is hard-to-do-right for all corner cases. Thus we exposed bugs in all three
3rd party synthesis tools under test.</p>

<p>While the 3rd party tools are only used for simple logic synthesis, Yosys is used
in various ways within VlogHammer, intensively testing the following sub-systems
within Yosys:</p>

<ul>
<li>The Verilog frontend, especially
<ul>
<li>The Verilog to RTL netlist generator and</li>
<li>the Verilog AST const-folder.</li>
</ul>
<li>The const evaluator for Yosys's coarse- and fine-grain internal representation</li>
<li>The standard synthesis pipeline in Yosys (excluding sequential optimizations such as FSM extraction)</li>
<li>The built-in SAT solver and the SAT models for all internal cell types.</li>
</ul>

<h2>Procedure</h2>

The following procedure is used in VlogHammer

<dl>
<dt><b>Test case generation</b></dt>
<dd>The auto-generated test cases are generated file names following the
pattern <tt>rtl/<i>&lt;category&gt;</i>_<i>&lt;id&gt;</i>.v</tt> and the
hand-written tests are copied to the <tt>rtl/</tt> directory. This is usually
done as a seperate step, allowing for individual selection of test cases
by modifying the <tt>rtl/</tt> directory. As a full run of VlogHammer may
take a couple of days of CPU time, manually selecting individual tests is
recommended for most situations. All further steps are conveniently wrapped
using a <tt>make world</tt> command.</dd>
<p/>
<dt><b>Synthesis</b></dt>
<dd>Yosys and the 3rd party synthesis tools are used to create Verilog netlists
for the RTL input. This step creates <tt>syn_<i>&lt;tool&gt;</i>/</tt> directories
with one netlist file per test case.</dd>
<p/>
<dt><b>Checking</b></dt>
<dd>The Yosys SAT solver is used to verify the synthesis results against the
Yosys coarse-grain RTL representation of the original Verilog input. Synthesizeable
models of the xilinx and Altera technology cells are used to create a SAT
model for the output of the 3rd party tools. Test cases where any of this
verifications fail are marked for report generation. This step creates the
<tt>check_<i>&lt;tool&gt;</i>/</tt> and <tt>cache_<i>&lt;tool&gt;</i>/</tt>
directories.</dd>
<p/>
<dt><b>Report Generation</b></dt>
<dd>For each test case that resulted in an error the the <i>Checking</i> step,
a detailed report is generated. The following steps are performed during this
report generation:
<ul style="margin:0px">
<li>Formal verification of all synthesis results and the Yosys RTL
representation against each other.</li>
<li>Simulation of synthesis results and original Verilog using the counter-examples
from the previous step and random bit pattern as test vectors.</li>
<li>Simulation using the Yosys internal const evaluation framework using the same
test vectors. Cross-verification of this results with the forward-solutions from the
SAT models for the same input.</li>
<li>Generation of HTML report with the results of this tests.</li>
</ul></dd>
<p/>
<dt><b>Summary Report</b></dt>
<dd>All individual reports are bundled in a single large HTML file that can
easily be distributed and browsed on a per-tool basis. The latter is especially
useful as the target audience of this reports is primarily interested in
the test cases that cause problems with their own tool.</dd>
</dl>

<h2>How to read VlogHammer reports</h2>

FIXME

@footer@
